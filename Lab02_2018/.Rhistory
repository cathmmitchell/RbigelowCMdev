sig_mat <- sw_dens(s = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
sig_mat
min(sig_mat)
max(sig_mat)
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']])
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
for (ii in 1:4) {
print("hello")
}
for (ii in 1:4) {
print(paste(ii,"hello"))
}
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
source('~/REUColbyCoding/CMdev/RbigelowCMdev/Lab02_2018/TSdiagram.R', echo=TRUE)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
range(colvar)
range(DATA[['Fluorescence']])
min(DATA[['Fluorescence']])
range(DATA[['Fluorescence']],na.rm=TRUE)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1)
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# displaying the correlation coefficient
corValue
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot: note we've added the line by three different methods
p <- ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='skyblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence), method = lm, se = FALSE, color='blue') +
geom_abline(slope=slope,intercept=intercept, size=1, color = "darkblue") +
stat_function(fun = function(x) intercept + slope * x, size = 1, color = 'blue')
# let's add the equation to the figure
p + annotate("text", x = 9, y = 11, label = paste("Temp = ", format(slope, digits=3), "Fluor + ", format(intercept,digits=3), sep=""))
# fitting a 2nd and 3rd order polynomial between the two variables
model2 <- lm(fl ~ temp + I(temp^2))
model3 <- lm(fl ~ temp + I(temp^2) + I(temp^3))
# assigning the coefficients from the models to the variables
p2 <- model2['coefficients'][[1]][[3]]
p1 <- model2['coefficients'][[1]][[2]]
p0 <- model2['coefficients'][[1]][[1]]
q3 <- model3['coefficients'][[1]][[4]]
q2 <- model3['coefficients'][[1]][[3]]
q1 <- model3['coefficients'][[1]][[2]]
q0 <- model3['coefficients'][[1]][[1]]
# adding the line to our plot: note only one of the above methods works for curves, stat_function
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='cornflowerblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence, color='line'), method = lm, se = FALSE,size=1.2) +
stat_function(fun = function(x) p0 + p1 * x + p2 * (x^2), size = 1.2, aes(color = '2nd order')) +
stat_function(fun = function(x) q0 + q1 * x + q2 * (x^2) + q3 * (x^3), size = 1.2, aes(color = '3rd order')) +
scale_colour_manual("",values = c("darkblue", "orange", "blue"))
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
std_error = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,std_error,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']],'Fluorescence')
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']],'Fluorescence')
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1) +
xlab('Temperature (deg C)') +
ylab('Fluorescence (mg/m^3)') +
coord_cartesian(xlim=c(7,18), ylim=c(0,12))
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# displaying the correlation coefficient
corValue
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1) +
xlab('Temperature (deg C)') +
ylab('Fluorescence (mg/m^3)') +
coord_cartesian(xlim=c(7,18), ylim=c(0,12))
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot: note we've added the line by three different methods
p <- ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='skyblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence), method = lm, se = FALSE, color='blue') +
geom_abline(slope=slope,intercept=intercept, size=1, color = "darkblue") +
stat_function(fun = function(x) intercept + slope * x, size = 1, color = 'blue') +
xlab('Temperature (deg C)') +
ylab('Fluorescence (mg/m^3)') +
coord_cartesian(xlim=c(7,18), ylim=c(0,12))
# let's add the equation to the figure
p + annotate("text", x = 9, y = 11, label = paste("Temp = ", format(slope, digits=3), "Fluor + ", format(intercept,digits=3), sep=""))
# fitting a 2nd and 3rd order polynomial between the two variables
model2 <- lm(fl ~ temp + I(temp^2))
model3 <- lm(fl ~ temp + I(temp^2) + I(temp^3))
# assigning the coefficients from the models to the variables
p2 <- model2['coefficients'][[1]][[3]]
p1 <- model2['coefficients'][[1]][[2]]
p0 <- model2['coefficients'][[1]][[1]]
q3 <- model3['coefficients'][[1]][[4]]
q2 <- model3['coefficients'][[1]][[3]]
q1 <- model3['coefficients'][[1]][[2]]
q0 <- model3['coefficients'][[1]][[1]]
# adding the line to our plot: note only one of the above methods works for curves, stat_function
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='cornflowerblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence, color='line'), method = lm, se = FALSE,size=1.2) +
stat_function(fun = function(x) p0 + p1 * x + p2 * (x^2), size = 1.2, aes(color = '2nd order')) +
stat_function(fun = function(x) q0 + q1 * x + q2 * (x^2) + q3 * (x^3), size = 1.2, aes(color = '3rd order')) +
scale_colour_manual("",values = c("darkblue", "orange", "blue")) +
xlab('Temperature (deg C)') +
ylab('Fluorescence (mg/m^3)') +
coord_cartesian(xlim=c(7,18), ylim=c(0,12))
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
std_error = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,std_error,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
std_error = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,std_error,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']],'Fluorescence (mg m^-3)',clim=c(0,11))
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']],'Fluorescence (mg m^-3)',clim=c(0,11))

library("readxl")
installed.packages
installed.packages()
install.packages("tidyverse")
library("readxl")
version
read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years")
warnings()
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range="A:M")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"))
View(DATA)
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("date","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
View(DATA)
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A3:M51071"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range="A3:M51071",col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range="A3:M51071",col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"),col_names=FALSE)
headers<-read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_rows("1"),col_names=FALSE)
headers<-read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_rows("1"),col_names=FALSE,col_types="text")
headers<-read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_rows("1:2"),col_names=FALSE,col_types="text")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range="A3:M51071",col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
headers<-read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_rows("1"),col_names=FALSE,col_types="text")
DATA1 <- DATA[-1]
View(DATA1)
View(DATA1)
DATA1 <- DATA[-1,]
library("readxl")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA <- DATA[-1,]
library("ggplot2")
library("ggplot2")
library("readxl")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA <- DATA[-1,]
library("readxl")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA <- DATA[-1,]
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence))
library("readxl")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA <- DATA[-1,]
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence))
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue")
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=4)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=2)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=1)
DATA['Temperature']
temp <- DATA['Temperature']
fl <- DATA['Fluorescence']
cor.test(temp,fl,method='pearson')
temp
View(fl)
fl
cor.test(x=temp,y=fl,method='pearson')
is.numeric(temp)
numeric(temp)
as.numeric(temp)
library("readxl")
DATA<- read_excel("Colby_cruise_data_2012-2017.xlsx",sheet="CTD all years",range=cell_cols("A:M"),col_types=c("skip","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric","numeric"))
DATA <- DATA[-1,]
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=1)
corValue <- cor.test(DATA['Temperature'],DATA['Fluorescence'],method="pearson")
temp <- DATA['Temperature']
fl <- DATA['Fluorescence']
temp
as.numeric(temp)
?(for i in)
lapply(temp,function(x) as.numeric(x))
# create variables for our two parameters of interest
temp <- DATA['Temperature']
fl <- DATA['Fluorescence']
# convert all values within our variables to numeric
temp <- lapply(temp, function(x) as.numeric(x))
fl <- lapply(fl, function(x) as.numeric(x))
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
vector(temp)
temp <- as.vector(DATA['Temperature'])
class(temp)
temp <- DATA[''Temperature'']
temp <- DATA[['Temperature']]
class(temp)
temp <- DATA[,4]
class(temp)
# create variables for our two parameters of interest
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
corValue
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns
# so we can perform our analysis, hence we need to use two brackets, [[]],
# to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# displaying the correlation coefficient
corValue
model1 <- lm(fl ~ temp)
model1
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=1) +
geom_smooth(method="lm")
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="blue",shape=18,size=1) +
geom_abline(slope=slope,intercept=intercept,size=0.5)
library("readxl")
DATA<- read_csv("Colby_cruise_data_2012-2017.csv")
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
View(DATA)
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
View(DATA)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1)
install.packages("tidyverse")
#install.packages("tidyverse")
#install.packages("tidyverse")
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1)
install.packages("tidyverse")
#install.packages("tidyverse")
View(DATA)
View(DATA)
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# displaying the correlation coefficient
corValue
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot: note we've added the line by three different methods
p <- ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='skyblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence), method = lm, se = FALSE, color='blue') +
geom_abline(slope=slope,intercept=intercept, size=1, color = "darkblue") +
stat_function(fun = function(x) intercept + slope * x, size = 1, color = 'blue')
# let's add the equation to the figure
p + annotate("text", x = 9, y = 11, label = paste("Temp = ", format(slope, digits=3), "Fluor + ", format(intercept,digits=3), sep=""))
# fitting a 2nd and 3rd order polynomial between the two variables
model2 <- lm(fl ~ temp + I(temp^2))
model3 <- lm(fl ~ temp + I(temp^2) + I(temp^3))
# assigning the coefficients from the models to the variables
p2 <- model2['coefficients'][[1]][[3]]
p1 <- model2['coefficients'][[1]][[2]]
p0 <- model2['coefficients'][[1]][[1]]
q3 <- model3['coefficients'][[1]][[4]]
q2 <- model3['coefficients'][[1]][[3]]
q1 <- model3['coefficients'][[1]][[2]]
q0 <- model3['coefficients'][[1]][[1]]
# adding the line to our plot: note only one of the above methods works for curves, stat_function
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='cornflowerblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence, color='line'), method = lm, se = FALSE,size=1.2) +
stat_function(fun = function(x) p0 + p1 * x + p2 * (x^2), size = 1.2, aes(color = '2nd order')) +
stat_function(fun = function(x) q0 + q1 * x + q2 * (x^2) + q3 * (x^3), size = 1.2, aes(color = '3rd order')) +
scale_colour_manual("",values = c("darkblue", "orange", "blue"))
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
#fstat = c(sum_model1$fstatistic,sum_model2$fstatistic,sum_model3$fstatistic)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
tidy(model1)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
#NB MAY NEED TO CHANGE THIS DEPENDING ON HOW I IMPORT
#THE CTD DATA
TSdiagram(CTD[,2],CTD[,3])
install.packages("marelac")
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
#NB MAY NEED TO CHANGE THIS DEPENDING ON HOW I IMPORT
#THE CTD DATA
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
install.packages("plot3D")
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
#NB MAY NEED TO CHANGE THIS DEPENDING ON HOW I IMPORT
#THE CTD DATA
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
DATA[['Temperature']]
DATA[['Salinity']]
DATA[['Salinity..PSU']]
DATA[['Salinity PSU']]
DATA[['Salinity (PSU)']]
DATA[['Salinity \(PS\U)']]
DATA[['Salinity \(PSU\)']]
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
#NB MAY NEED TO CHANGE THIS DEPENDING ON HOW I IMPORT
#THE CTD DATA
TSdiagram(DATA[["Temperature"]],DATA[[,6]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
#NB MAY NEED TO CHANGE THIS DEPENDING ON HOW I IMPORT
#THE CTD DATA
TSdiagram(DATA[["Temperature"]],DATA[,6])
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
library("ggplot2")
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence),color="skyblue",shape=18,size=1)
# create variables for our two parameters of interest
# NB: we want to the data to be vectors, rather than dataframe columns so we can perform our analysis, hence we need to use two brackets, [[]], to index the DATA dataframe
temp <- DATA[['Temperature']]
fl <- DATA[['Fluorescence']]
# calculate the correlation coefficient
corValue <- cor.test(temp, fl, method="pearson")
# displaying the correlation coefficient
corValue
# fitting a linear model between the two variables
model1 <- lm(fl ~ temp)
# assigning the slope and intercept fromt the model to variables
slope <- model1['coefficients'][[1]][[2]]
intercept <- model1['coefficients'][[1]][[1]]
# adding the line to our plot: note we've added the line by three different methods
p <- ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='skyblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence), method = lm, se = FALSE, color='blue') +
geom_abline(slope=slope,intercept=intercept, size=1, color = "darkblue") +
stat_function(fun = function(x) intercept + slope * x, size = 1, color = 'blue')
# let's add the equation to the figure
p + annotate("text", x = 9, y = 11, label = paste("Temp = ", format(slope, digits=3), "Fluor + ", format(intercept,digits=3), sep=""))
View(DATA)
View(DATA)
# fitting a 2nd and 3rd order polynomial between the two variables
model2 <- lm(fl ~ temp + I(temp^2))
model3 <- lm(fl ~ temp + I(temp^2) + I(temp^3))
# assigning the coefficients from the models to the variables
p2 <- model2['coefficients'][[1]][[3]]
p1 <- model2['coefficients'][[1]][[2]]
p0 <- model2['coefficients'][[1]][[1]]
q3 <- model3['coefficients'][[1]][[4]]
q2 <- model3['coefficients'][[1]][[3]]
q1 <- model3['coefficients'][[1]][[2]]
q0 <- model3['coefficients'][[1]][[1]]
# adding the line to our plot: note only one of the above methods works for curves, stat_function
ggplot(data = DATA) +
geom_point(mapping = aes(x = Temperature, y = Fluorescence), color='cornflowerblue', shape=18,size=1) +
geom_smooth(mapping = aes(x = Temperature, y = Fluorescence, color='line'), method = lm, se = FALSE,size=1.2) +
stat_function(fun = function(x) p0 + p1 * x + p2 * (x^2), size = 1.2, aes(color = '2nd order')) +
stat_function(fun = function(x) q0 + q1 * x + q2 * (x^2) + q3 * (x^3), size = 1.2, aes(color = '3rd order')) +
scale_colour_manual("",values = c("darkblue", "orange", "blue"))
# printing a summary of the 3 different fits
summary(model1)
summary(model2)
summary(model3)
# assigning summaries to variables
sum_model1 <- summary(model1)
sum_model2 <- summary(model2)
sum_model3 <- summary(model3)
# combining statistics into vectors
rsquare = c(sum_model1$r.squared,sum_model2$r.squared,sum_model3$r.squared)
adjrsquare = c(sum_model1$adj.r.squared,sum_model2$adj.r.squared,sum_model3$adj.r.squared)
sigma = c(sum_model1$sigma,sum_model2$sigma,sum_model3$sigma)
# unfortunately we can't extract the p-value in the same way, but we can calculate it separately
pvalue = c(pf(sum_model1$fstatistic[[1]],sum_model1$fstatistic[[2]],sum_model1$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model2$fstatistic[[1]],sum_model2$fstatistic[[2]],sum_model2$fstatistic[[3]],lower.tail = FALSE),
pf(sum_model3$fstatistic[[1]],sum_model3$fstatistic[[2]],sum_model3$fstatistic[[3]],lower.tail = FALSE))
# creating a dataframe containing the model statistics
statsData = data.frame(rsquare,adjrsquare,sigma,pvalue,row.names=c("model1","model2","model3"))
statsData
# note: a quick & easy way to pull out the model coefficients and their associated statistics, displaying them in a digestable form, is to use the tidy function from the broom package (part of the tidyverse)
library("broom")
tidy(model1)
DATA<- read.csv("Colby_cruise_data_2012-2017.csv", header=TRUE)
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[['Salinity]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
install.packages("marelac")
install.packages("plot3D")
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
sig_mat <- sw_dens(s = DATA[['Salinity']], t = DATA[['Temperature']])
sig_mat <- sw_dens(s = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
sig_mat
min(sig_mat)
max(sig_mat)
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']])
sig_mat <- sw_dens(S = DATA[['Salinity']], t = DATA[['Temperature']]) - 1000
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]],DATA[['Fluorescence']])
#load the function into your R workspace:
source('TSdiagram.R')
#call the function:
TSdiagram(DATA[["Temperature"]],DATA[["Salinity"]])
for (ii in 1:4) {
print("hello")
}
for (ii in 1:4) {
print(paste(ii,"hello"))
}
